AWSTemplateFormatVersion: '2010-09-09'
Description: 'Rento GraphQL API - EC2 Instance (APPI Compliant - Tokyo Region)'

# ============================================================================
# DEV NOTES
# ============================================================================
# This CloudFormation template deploys a single EC2 instance to run the
# Rento GraphQL API server in development environment.
#
# What This Creates:
# - EC2 t3.micro instance (2 vCPU, 1GB RAM) in Tokyo region
# - Security group allowing:
#   - HTTP/HTTPS from anywhere (for API access)
#   - SSH from authorized IPs (for deployment)
#   - Outbound to RDS/Redis in VPC (for database connectivity)
# - IAM role with permissions for:
#   - CloudWatch Logs (audit logging)
#   - Systems Manager Parameter Store (secrets)
#   - S3 (deployment artifacts - optional)
# - Elastic IP (static public IP address)
# - CloudWatch Logs group (2-year retention for APPI)
#
# User Data Script Installs:
# - Node.js 20.x LTS
# - PM2 (process manager)
# - CloudWatch Agent (for APPI audit logging)
# - Git (for code deployment)
#
# APPI Compliance Features:
# - Data residency: Tokyo region only
# - Encryption: EBS volumes encrypted with AES-256
# - Audit logging: CloudWatch Logs with 2-year retention
# - Access control: IAM roles, security groups
# - Network isolation: VPC with private access to RDS/Redis
#
# Cost Estimate (Development):
# - t3.micro: $10/month
# - EBS 20GB gp3: $2/month
# - Elastic IP: $0/month (only if instance stopped)
# - CloudWatch Logs 5GB: $2.50/month
# Total: ~$15/month
# ============================================================================

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name

  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type (t3.micro for dev, t3.small+ for prod)

  VPCId:
    Type: String
    Description: VPC ID where RDS and Redis are located (from postgres stack)

  PrivateSubnetIds:
    Type: CommaDelimitedList
    Description: Private subnet IDs for EC2 instance (from postgres stack)

  AppSecurityGroupId:
    Type: String
    Description: Security group ID that has access to RDS/Redis (from postgres stack)

  KeyPairName:
    Type: String
    Description: EC2 Key Pair name for SSH access (create in EC2 console first)
    Default: ''

  AllowedSSHCIDR:
    Type: String
    Default: '0.0.0.0/0'
    Description: CIDR block allowed to SSH (recommend restricting to your IP)

  NodeVersion:
    Type: String
    Default: '20'
    Description: Node.js major version to install

# ============================================================================
# CONDITIONS
# ============================================================================

Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, '']]

# ============================================================================
# MAPPINGS
# ============================================================================

Mappings:
  RegionMap:
    ap-northeast-1:  # Tokyo
      AMI: ami-0d52744d6551d851e  # Amazon Linux 2023 ARM64 (update as needed)

# ============================================================================
# RESOURCES
# ============================================================================

Resources:
  # ==========================================================================
  # IAM ROLE - EC2 Instance Profile
  # ==========================================================================
  # Allows EC2 instance to:
  # - Write logs to CloudWatch (APPI audit logging)
  # - Read secrets from Parameter Store
  # - (Optional) Read deployment artifacts from S3
  # ==========================================================================

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-rento-graphql-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy  # CloudWatch Logs
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore  # Systems Manager
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Environment}/rento/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-graphql-ec2-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${Environment}-rento-graphql-ec2-profile'
      Roles:
        - !Ref EC2InstanceRole

  # ==========================================================================
  # SECURITY GROUP - EC2 Instance
  # ==========================================================================
  # Inbound:
  # - HTTP (80) from anywhere (for ALB or direct access)
  # - HTTPS (443) from anywhere (for ALB or direct access)
  # - Custom TCP (4000) from anywhere (GraphQL API port)
  # - SSH (22) from allowed CIDR (for deployment and debugging)
  # Outbound:
  # - All traffic (for package downloads, RDS/Redis access)
  # ==========================================================================

  GraphQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${Environment}-rento-graphql-sg'
      GroupDescription: Security group for Rento GraphQL API EC2 instance
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        # HTTP for health checks or reverse proxy
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from anywhere
        # HTTPS for reverse proxy
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from anywhere
        # GraphQL API port
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: 0.0.0.0/0
          Description: GraphQL API from anywhere
        # SSH for deployment
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCIDR
          Description: SSH from allowed CIDR
      SecurityGroupEgress:
        # Allow all outbound (for npm install, RDS/Redis access, etc.)
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-graphql-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'

  # ==========================================================================
  # EC2 INSTANCE - GraphQL API Server
  # ==========================================================================
  # Amazon Linux 2023 with:
  # - Node.js 20.x LTS
  # - PM2 process manager
  # - CloudWatch agent for logging
  # - Automatic security updates
  # ==========================================================================

  GraphQLInstance:
    Type: AWS::EC2::Instance
    DependsOn: LogGroup
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue']
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Select [0, !Ref PrivateSubnetIds]
      SecurityGroupIds:
        - !Ref GraphQLSecurityGroup
        - !Ref AppSecurityGroupId  # For RDS/Redis access
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            Encrypted: true  # APPI requirement: encryption at rest
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # ============================================================================
          # EC2 USER DATA SCRIPT - GraphQL API Server Setup
          # ============================================================================
          # This script runs once when the EC2 instance first launches.
          # It installs and configures everything needed to run the GraphQL API.
          # ============================================================================

          set -e  # Exit on error

          # Update system packages
          echo "==> Updating system packages..."
          dnf update -y

          # Install Node.js ${NodeVersion}.x LTS
          echo "==> Installing Node.js ${NodeVersion}.x..."
          dnf install -y nodejs npm git

          # Verify Node.js installation
          node --version
          npm --version

          # Install PM2 globally (process manager)
          echo "==> Installing PM2..."
          npm install -g pm2

          # Install CloudWatch agent
          echo "==> Installing CloudWatch agent..."
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm

          # Create application directory
          echo "==> Creating application directory..."
          mkdir -p /opt/rento-api
          cd /opt/rento-api

          # Create deployment user (optional, for security)
          # useradd -r -s /bin/bash -d /opt/rento-api rento
          # chown -R rento:rento /opt/rento-api

          # Install unattended-upgrades for automatic security updates (APPI requirement)
          echo "==> Configuring automatic security updates..."
          dnf install -y dnf-automatic
          systemctl enable --now dnf-automatic-install.timer

          # Create CloudWatch agent configuration
          echo "==> Configuring CloudWatch agent..."
          cat > /opt/aws/amazon-cloudwatch-agent/etc/config.json << 'CWEOF'
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/opt/rento-api/logs/app.log",
                      "log_group_name": "/aws/ec2/${Environment}-rento-graphql",
                      "log_stream_name": "{instance_id}/application",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/opt/rento-api/logs/error.log",
                      "log_group_name": "/aws/ec2/${Environment}-rento-graphql",
                      "log_stream_name": "{instance_id}/error",
                      "timezone": "Local"
                    },
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "/aws/ec2/${Environment}-rento-graphql",
                      "log_stream_name": "{instance_id}/system",
                      "timezone": "Local"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "namespace": "Rento/EC2",
              "metrics_collected": {
                "cpu": {
                  "measurement": [{"name": "cpu_usage_idle", "rename": "CPU_IDLE", "unit": "Percent"}],
                  "metrics_collection_interval": 60,
                  "totalcpu": false
                },
                "disk": {
                  "measurement": [{"name": "used_percent", "rename": "DISK_USED", "unit": "Percent"}],
                  "metrics_collection_interval": 60,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": [{"name": "mem_used_percent", "rename": "MEM_USED", "unit": "Percent"}],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          CWEOF

          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -s \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/config.json

          # Create log directory
          mkdir -p /opt/rento-api/logs

          # Create placeholder for environment variables (deployment script will populate)
          cat > /opt/rento-api/.env << 'ENVEOF'
          # Environment variables will be populated during deployment
          NODE_ENV=production
          GRAPHQL_PORT=4000
          GRAPHQL_HOST=0.0.0.0
          ENVEOF

          # Signal CloudFormation that setup is complete
          echo "==> EC2 setup complete!"
          echo "==> Ready for application deployment"

      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-graphql-api'
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'
        - Key: DataLocation
          Value: Japan-Tokyo

  # ==========================================================================
  # ELASTIC IP - Static Public IP Address
  # ==========================================================================
  # Provides a static public IP that doesn't change when instance restarts
  # ==========================================================================

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref GraphQLInstance
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-graphql-eip'
        - Key: Environment
          Value: !Ref Environment

  # ==========================================================================
  # CLOUDWATCH LOGS - Audit Logging (APPI Requirement)
  # ==========================================================================
  # Stores application logs for 2 years (APPI requirement)
  # ==========================================================================

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${Environment}-rento-graphql'
      RetentionInDays: 731  # 2 years for APPI compliance (731 is the valid AWS value)
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'

# ============================================================================
# OUTPUTS
# ============================================================================

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref GraphQLInstance
    Export:
      Name: !Sub '${Environment}-rento-graphql-instance-id'

  InstancePublicIp:
    Description: Public IP address of EC2 instance
    Value: !Ref ElasticIP
    Export:
      Name: !Sub '${Environment}-rento-graphql-public-ip'

  InstancePrivateIp:
    Description: Private IP address of EC2 instance
    Value: !GetAtt GraphQLInstance.PrivateIp
    Export:
      Name: !Sub '${Environment}-rento-graphql-private-ip'

  GraphQLEndpoint:
    Description: GraphQL API endpoint URL
    Value: !Sub 'http://${ElasticIP}:4000/graphql'
    Export:
      Name: !Sub '${Environment}-rento-graphql-endpoint'

  HealthCheckEndpoint:
    Description: Health check endpoint URL
    Value: !Sub 'http://${ElasticIP}:4000/health'
    Export:
      Name: !Sub '${Environment}-rento-graphql-health-endpoint'

  SecurityGroupId:
    Description: Security group ID for GraphQL EC2 instance
    Value: !Ref GraphQLSecurityGroup
    Export:
      Name: !Sub '${Environment}-rento-graphql-sg-id'

  InstanceRoleArn:
    Description: IAM role ARN for EC2 instance
    Value: !GetAtt EC2InstanceRole.Arn
    Export:
      Name: !Sub '${Environment}-rento-graphql-role-arn'

  LogGroupName:
    Description: CloudWatch Logs group name
    Value: !Ref LogGroup
    Export:
      Name: !Sub '${Environment}-rento-graphql-log-group'

  SSHCommand:
    Description: SSH command to connect to instance
    Value: !If
      - HasKeyPair
      - !Sub 'ssh -i ~/.ssh/${KeyPairName}.pem ec2-user@${ElasticIP}'
      - 'No key pair specified - use Systems Manager Session Manager'
