# ============================================================================
# DEV NOTES
# ============================================================================
#  
# This is a Infrastructure as Code (IAC) template that defines and deploys the entire
# PostgresSQL database infrastructure on AWS. Analogous to a 'blueprint' that creates 
# all the AWS resources needed for our APPI compliant DB.
# 
# Without cloudfront you would have to manually:
# - create VPC and subnets in AWS console
# - configures security groups and routing 
# - setup RDS instance with correct parameters
# - create KMS keys and configure encryption
# 
# What it does
# 
# Creates a complete, production-ready PSQL environment in Tokyo region with the following:
# 
# 1. Network Infrastructure
# - Isolated VPC (Virtual Private Cloud) 
# - Prviate subnets in multiple Availability zones (1a, 1c)
# - Configures security groups to control DB Access
# 
# 2. PSQL RDS Instance
# - PostgresSQL 15.4 with APPI compliance settings
# - Multi-AZ deployment for 99.95% availability
# - AES-256 encryption at rest with KMS keys
# - Automated backups w/ 14-day retention 
# - Peformance monitoring with enhanced monitoring
# 
# 3. Security & Encryption
# - KMS encryption keys
# - Automatic key rotation for security
# - TLS 1.3 for all connections
# - Network isolation via private subnets
# - Only Rento application servers can connect to the DB
# 
# 4. APPI compliance features
# - Connection logging for audit trails
# - Statement logging for all queries
# - SSL enforcement for encrypted connections
# - Row Level Security enabled
AWSTemplateFormatVersion: '2010-09-09'
Description: 'APPI Compliant PostgreSQL RDS deployment in Tokyo region with AES-256 encryption'

Parameters:
  Environment:
    Type: String
    Default: 'production'
    AllowedValues: ['development', 'staging', 'production']
  DBInstanceClass:
    Type: String
    Default: 'db.t3.micro'
    Description: 'RDS instance class'
  DBName:
    Type: String
    Default: 'rento_appi_db'
    Description: 'Database name'
  DBUsername:
    Type: String
    Default: 'rento_admin'
    NoEcho: true
    Description: 'Database admin username'
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 12
    Description: 'Database admin password (minimum 12 characters)'

Resources:
  # VPC for database isolation
  RentoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-vpc'
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'

  # Private subnets for database (Multi-AZ in Tokyo region)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RentoVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-private-subnet-1'
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref RentoVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-private-subnet-2'
        - Key: Environment
          Value: !Ref Environment

  # DB Subnet Group for Multi-AZ deployment
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS database'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-db-subnet-group'
        - Key: Environment
          Value: !Ref Environment

  # Security Group for RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for PostgreSQL RDS'
      VpcId: !Ref RentoVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppSecurityGroup
          Description: 'PostgreSQL access from application servers'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-db-sg'
        - Key: Environment
          Value: !Ref Environment

  # Security Group for Application servers
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for application servers'
      VpcId: !Ref RentoVPC
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-app-sg'
        - Key: Environment
          Value: !Ref Environment

  # KMS Key for RDS encryption (Japanese banking standards)
  RDSKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS Key for RDS PostgreSQL encryption - APPI compliant'
      KeyPolicy:
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow RDS Service
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Resource: '*'
      KeyRotationStatus: true
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-rds-kms-key'
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'

  # KMS Key Alias
  RDSKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${Environment}-rento-rds-key'
      TargetKeyId: !Ref RDSKMSKey

  # Parameter Group for PostgreSQL configuration
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: 'postgres15'
      Description: 'PostgreSQL parameter group with APPI compliance settings'
      Parameters:
        # Enable connection logging for audit compliance
        log_connections: '1'
        log_disconnections: '1'
        log_statement: 'all'
        log_min_duration_statement: '0'
        # Enable SSL/TLS
        ssl: '1'
        # Row-level security for data access control
        row_security: '1'
        # Enable pgcrypto extension for PII encryption
        shared_preload_libraries: 'pg_stat_statements,pgcrypto'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-db-params'
        - Key: Environment
          Value: !Ref Environment

  # PostgreSQL RDS Instance
  PostgreSQLDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${Environment}-rento-postgres'
      DBName: !Ref DBName
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      EngineVersion: '15.4'
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      AllocatedStorage: '100'
      MaxAllocatedStorage: '1000'
      StorageType: 'gp3'
      StorageEncrypted: true
      KmsKeyId: !Ref RDSKMSKey

      # Multi-AZ for high availability within Tokyo region
      MultiAZ: true

      # Network configuration
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

      # Backup configuration (8-hour RTO compliance)
      BackupRetentionPeriod: 14
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'

      # Performance and monitoring
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt RDSEnhancedMonitoringRole.Arn
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      PerformanceInsightsKMSKeyId: !Ref RDSKMSKey

      # Parameter group
      DBParameterGroupName: !Ref DBParameterGroup

      # Security
      DeletionProtection: true

      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-postgres'
        - Key: Environment
          Value: !Ref Environment
        - Key: APPICompliant
          Value: 'true'
        - Key: DataLocation
          Value: 'Japan-Tokyo'

  # IAM Role for RDS Enhanced Monitoring
  RDSEnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-rento-rds-monitoring-role'
        - Key: Environment
          Value: !Ref Environment

Outputs:
  DatabaseEndpoint:
    Description: 'PostgreSQL database endpoint'
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Address
    Export:
      Name: !Sub '${Environment}-rento-db-endpoint'

  DatabasePort:
    Description: 'PostgreSQL database port'
    Value: !GetAtt PostgreSQLDatabase.Endpoint.Port
    Export:
      Name: !Sub '${Environment}-rento-db-port'

  DatabaseName:
    Description: 'PostgreSQL database name'
    Value: !Ref DBName
    Export:
      Name: !Sub '${Environment}-rento-db-name'

  VPCId:
    Description: 'VPC ID'
    Value: !Ref RentoVPC
    Export:
      Name: !Sub '${Environment}-rento-vpc-id'

  AppSecurityGroupId:
    Description: 'Application Security Group ID'
    Value: !Ref AppSecurityGroup
    Export:
      Name: !Sub '${Environment}-rento-app-sg-id'

  KMSKeyId:
    Description: 'KMS Key ID for encryption'
    Value: !Ref RDSKMSKey
    Export:
      Name: !Sub '${Environment}-rento-kms-key-id'