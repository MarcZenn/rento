name: Deploy Database Migrations

on:
  # Manual trigger only - for both development and production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - production

permissions:
  id-token: write  # Required for AWS OIDC
  contents: read

jobs:
  validate-migrations:
    name: Validate Migration Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install Dependencies
        working-directory: server
        run: npm ci

      - name: Check Migration Syntax
        working-directory: server
        run: |
          echo "Checking TypeScript compilation..."
          npx tsc --noEmit database/migrate.ts database/migrations.ts

      - name: Lint SQL Files
        working-directory: server/database
        run: |
          echo "Validating SQL file syntax..."
          for sql_file in *.sql; do
            if [ -f "$sql_file" ]; then
              echo "Checking $sql_file..."
              # Basic syntax check - will fail on obvious syntax errors
              grep -q "CREATE\|ALTER\|DROP\|INSERT" "$sql_file" || {
                echo "‚ùå $sql_file appears to be empty or invalid"
                exit 1
              }
            fi
          done
          echo "‚úÖ All SQL files validated"

  deploy-to-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate-migrations
    # Manual trigger only
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    environment:
      name: development
      url: https://dev.rento.app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Configure AWS Credentials (Development)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEVELOPMENT }}
          aws-region: ap-northeast-1
          role-session-name: GitHubActions-DevMigration

      - name: Verify AWS Account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Connected to AWS Account: $ACCOUNT_ID"
          if [ "$ACCOUNT_ID" != "${{ secrets.AWS_ACCOUNT_ID_DEVELOPMENT }}" ]; then
            echo "‚ùå Wrong AWS account!"
            exit 1
          fi
          echo "‚úÖ Confirmed development account"

      - name: Trigger CodeBuild Migration (Development)
        run: |
          echo "=========================================="
          echo "Starting CodeBuild Database Migration"
          echo "=========================================="
          echo "Environment: development"
          echo "Project: development-rento-database-migration"
          echo "Time: $(date)"
          echo "=========================================="

          # Start CodeBuild project
          BUILD_ID=$(aws codebuild start-build \
            --project-name development-rento-database-migration \
            --source-version ${{ github.ref_name }} \
            --query 'build.id' \
            --output text)

          echo "‚úÖ CodeBuild started successfully"
          echo "Build ID: $BUILD_ID"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV

          # Extract log info for easy access
          LOG_URL="https://console.aws.amazon.com/codesuite/codebuild/projects/development-rento-database-migration/build/$BUILD_ID"
          echo "üìä View logs: $LOG_URL"
          echo "LOG_URL=$LOG_URL" >> $GITHUB_ENV

          echo ""
          echo "‚è≥ Waiting for migration to complete..."
          echo "This may take 10-15 minutes (includes RDS snapshot creation)"
          echo ""

          # Poll until build completes
          ATTEMPT=0
          MAX_ATTEMPTS=120  # 20 minutes max (10 second intervals)

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].buildStatus' \
              --output text)

            PHASE=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].currentPhase' \
              --output text)

            echo "[$ATTEMPT/$MAX_ATTEMPTS] Status: $STATUS | Phase: $PHASE"

            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo ""
              echo "=========================================="
              echo "‚úÖ Migration Completed Successfully"
              echo "=========================================="

              # Get snapshot ID from build artifacts/logs if available
              SNAPSHOT_INFO=$(aws codebuild batch-get-builds \
                --ids "$BUILD_ID" \
                --query 'builds[0].phases[?phaseType==`PRE_BUILD`].contexts[0].message' \
                --output text 2>/dev/null || echo "")

              if [ ! -z "$SNAPSHOT_INFO" ]; then
                echo "Snapshot: $SNAPSHOT_INFO"
              fi

              echo "Build ID: $BUILD_ID"
              echo "View logs: $LOG_URL"
              echo "=========================================="
              exit 0
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "TIMED_OUT" ] || [ "$STATUS" = "STOPPED" ]; then
              echo ""
              echo "=========================================="
              echo "‚ùå Migration Failed"
              echo "=========================================="
              echo "Status: $STATUS"
              echo "Phase: $PHASE"
              echo "Build ID: $BUILD_ID"
              echo "View logs: $LOG_URL"
              echo "=========================================="
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          # Timeout reached
          echo ""
          echo "=========================================="
          echo "‚è∞ Build Timeout"
          echo "=========================================="
          echo "Build exceeded maximum wait time (20 minutes)"
          echo "Build ID: $BUILD_ID"
          echo "View logs: $LOG_URL"
          echo "=========================================="
          exit 1

      - name: Create GitHub Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Development Migration Failed',
              body: `## Development Database Migration Failed

              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Branch:** ${context.ref}
              **Triggered by:** @${context.actor}
              **Snapshot for rollback:** ${{ env.SNAPSHOT_ID }}

              ### Actions Required:
              1. Review the workflow logs for errors
              2. Verify development database health
              3. Consider rollback if database is inconsistent
              4. Fix migration issues and re-run

              ### Rollback Command:
              \`\`\`bash
              aws rds restore-db-instance-from-db-snapshot \\
                --db-instance-identifier development-rento-postgres-restored \\
                --db-snapshot-identifier ${{ env.SNAPSHOT_ID }} \\
                --profile rento-development-sso
              \`\`\`
              `,
              labels: ['database', 'development', 'migration-failure']
            })

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-migrations
    # Manual trigger only, and only for production environment
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://rento.app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Configure AWS Credentials (Production)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
          aws-region: ap-northeast-1
          role-session-name: GitHubActions-ProdMigration

      - name: Verify AWS Account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Connected to AWS Account: $ACCOUNT_ID"
          if [ "$ACCOUNT_ID" != "${{ secrets.AWS_ACCOUNT_ID_PRODUCTION }}" ]; then
            echo "‚ùå Wrong AWS account!"
            exit 1
          fi
          echo "‚úÖ Confirmed production account"

      - name: Trigger CodeBuild Migration (Production)
        run: |
          echo "=========================================="
          echo "üö® PRODUCTION DATABASE MIGRATION üö®"
          echo "=========================================="
          echo "Environment: PRODUCTION"
          echo "Project: production-rento-database-migration"
          echo "Time: $(date)"
          echo "Triggered by: ${{ github.actor }}"
          echo "=========================================="
          echo "‚ö†Ô∏è  This will modify the production database"
          echo "‚ö†Ô∏è  RDS snapshot will be created automatically"
          echo "=========================================="

          # Start CodeBuild project
          BUILD_ID=$(aws codebuild start-build \
            --project-name production-rento-database-migration \
            --source-version ${{ github.ref_name }} \
            --query 'build.id' \
            --output text)

          echo "‚úÖ CodeBuild started successfully"
          echo "Build ID: $BUILD_ID"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV

          # Extract log info for easy access
          LOG_URL="https://console.aws.amazon.com/codesuite/codebuild/projects/production-rento-database-migration/build/$BUILD_ID"
          echo "üìä View logs: $LOG_URL"
          echo "LOG_URL=$LOG_URL" >> $GITHUB_ENV

          echo ""
          echo "‚è≥ Waiting for migration to complete..."
          echo "This may take 10-15 minutes (includes RDS snapshot creation)"
          echo ""

          # Poll until build completes
          ATTEMPT=0
          MAX_ATTEMPTS=120  # 20 minutes max (10 second intervals)

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].buildStatus' \
              --output text)

            PHASE=$(aws codebuild batch-get-builds \
              --ids "$BUILD_ID" \
              --query 'builds[0].currentPhase' \
              --output text)

            echo "[$ATTEMPT/$MAX_ATTEMPTS] Status: $STATUS | Phase: $PHASE"

            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo ""
              echo "=========================================="
              echo "‚úÖ PRODUCTION Migration Completed"
              echo "=========================================="

              # Get snapshot ID from build artifacts/logs if available
              SNAPSHOT_INFO=$(aws codebuild batch-get-builds \
                --ids "$BUILD_ID" \
                --query 'builds[0].phases[?phaseType==`PRE_BUILD`].contexts[0].message' \
                --output text 2>/dev/null || echo "")

              if [ ! -z "$SNAPSHOT_INFO" ]; then
                echo "Snapshot: $SNAPSHOT_INFO"
                echo "SNAPSHOT_ID=$SNAPSHOT_INFO" >> $GITHUB_ENV
              fi

              echo "Build ID: $BUILD_ID"
              echo "View logs: $LOG_URL"
              echo "=========================================="
              exit 0
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "TIMED_OUT" ] || [ "$STATUS" = "STOPPED" ]; then
              echo ""
              echo "=========================================="
              echo "üö® PRODUCTION Migration FAILED üö®"
              echo "=========================================="
              echo "Status: $STATUS"
              echo "Phase: $PHASE"
              echo "Build ID: $BUILD_ID"
              echo "View logs: $LOG_URL"
              echo "=========================================="
              echo "‚ö†Ô∏è  IMMEDIATE ACTION REQUIRED"
              echo "‚ö†Ô∏è  Check database health"
              echo "‚ö†Ô∏è  Consider rollback from snapshot"
              echo "=========================================="
              exit 1
            fi

            ATTEMPT=$((ATTEMPT + 1))
            sleep 10
          done

          # Timeout reached
          echo ""
          echo "=========================================="
          echo "‚è∞ PRODUCTION Build Timeout"
          echo "=========================================="
          echo "Build exceeded maximum wait time (20 minutes)"
          echo "Build ID: $BUILD_ID"
          echo "View logs: $LOG_URL"
          echo "=========================================="
          exit 1

      - name: Create GitHub Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Migration Failed',
              body: `## Production Database Migration Failed

              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Commit:** ${context.sha}
              **Triggered by:** @${context.actor}
              **Snapshot for rollback:** ${{ env.SNAPSHOT_ID }}

              ### Immediate Actions Required:
              1. Investigate the failure in the workflow logs
              2. Assess production database health
              3. Consider rollback if database is inconsistent
              4. Fix migration issues and re-deploy

              ### Rollback Command:
              \`\`\`bash
              aws rds restore-db-instance-from-db-snapshot \\
                --db-instance-identifier production-rento-postgres-restored \\
                --db-snapshot-identifier ${{ env.SNAPSHOT_ID }}
              \`\`\`

              cc: @your-team-members
              `,
              labels: ['critical', 'database', 'production']
            })
