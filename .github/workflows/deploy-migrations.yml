name: Deploy Database Migrations

on:
  # Manual trigger only - for both development and production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - development
          - production

permissions:
  id-token: write  # Required for AWS OIDC
  contents: read

jobs:
  validate-migrations:
    name: Validate Migration Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install Dependencies
        working-directory: server
        run: npm ci

      - name: Check Migration Syntax
        working-directory: server
        run: |
          echo "Checking TypeScript compilation..."
          npx tsc --noEmit database/migrate.ts database/migrations.ts

      - name: Lint SQL Files
        working-directory: server/database
        run: |
          echo "Validating SQL file syntax..."
          for sql_file in *.sql; do
            if [ -f "$sql_file" ]; then
              echo "Checking $sql_file..."
              # Basic syntax check - will fail on obvious syntax errors
              grep -q "CREATE\|ALTER\|DROP\|INSERT" "$sql_file" || {
                echo "‚ùå $sql_file appears to be empty or invalid"
                exit 1
              }
            fi
          done
          echo "‚úÖ All SQL files validated"

  deploy-to-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate-migrations
    # Manual trigger only
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development'
    environment:
      name: development
      url: https://dev.rento.app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Configure AWS Credentials (Development)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEVELOPMENT }}
          aws-region: ap-northeast-1
          role-session-name: GitHubActions-DevMigration

      - name: Verify AWS Account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Connected to AWS Account: $ACCOUNT_ID"
          if [ "$ACCOUNT_ID" != "${{ secrets.AWS_ACCOUNT_ID_DEVELOPMENT }}" ]; then
            echo "‚ùå Wrong AWS account!"
            exit 1
          fi
          echo "‚úÖ Confirmed development account"

      - name: Install Dependencies
        working-directory: server
        run: npm ci

      - name: Create RDS Snapshot (Development)
        run: |
          SNAPSHOT_ID="dev-pre-migration-$(date +%Y%m%d-%H%M%S)"
          echo "Creating snapshot: $SNAPSHOT_ID"
          echo "SNAPSHOT_ID=$SNAPSHOT_ID" >> $GITHUB_ENV

          aws rds create-db-snapshot \
            --db-instance-identifier development-rento-postgres \
            --db-snapshot-identifier "$SNAPSHOT_ID" \
            --tags Key=Environment,Value=Development Key=CreatedBy,Value=GitHubActions

          echo "‚è≥ Waiting for snapshot to complete..."
          aws rds wait db-snapshot-completed \
            --db-snapshot-identifier "$SNAPSHOT_ID" \
            --max-attempts 30 \
            --delay 10

          echo "‚úÖ Snapshot completed: $SNAPSHOT_ID"

      - name: Check Migration Status
        working-directory: server
        env:
          CI: true
          MIGRATION_ENV: dev
        run: |
          echo "Current migration status:"
          npm run db:migrate:dev:status || true

      - name: Run Migrations (Development)
        working-directory: server
        env:
          CI: true
          AUTO_CONFIRM: true
          MIGRATION_ENV: dev
        run: npm run db:migrate:dev

      - name: Verify Migration Success
        working-directory: server
        env:
          CI: true
          MIGRATION_ENV: dev
        run: |
          echo "Verifying database health..."
          npm run db:migrate:dev:status

      - name: Create GitHub Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ö†Ô∏è Development Migration Failed',
              body: `## Development Database Migration Failed

              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Branch:** ${context.ref}
              **Triggered by:** @${context.actor}
              **Snapshot for rollback:** ${{ env.SNAPSHOT_ID }}

              ### Actions Required:
              1. Review the workflow logs for errors
              2. Verify development database health
              3. Consider rollback if database is inconsistent
              4. Fix migration issues and re-run

              ### Rollback Command:
              \`\`\`bash
              aws rds restore-db-instance-from-db-snapshot \\
                --db-instance-identifier development-rento-postgres-restored \\
                --db-snapshot-identifier ${{ env.SNAPSHOT_ID }} \\
                --profile rento-development-sso
              \`\`\`
              `,
              labels: ['database', 'development', 'migration-failure']
            })

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate-migrations
    # Manual trigger only, and only for production environment
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://rento.app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Configure AWS Credentials (Production)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PRODUCTION }}
          aws-region: ap-northeast-1
          role-session-name: GitHubActions-ProdMigration

      - name: Verify AWS Account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "Connected to AWS Account: $ACCOUNT_ID"
          if [ "$ACCOUNT_ID" != "${{ secrets.AWS_ACCOUNT_ID_PRODUCTION }}" ]; then
            echo "‚ùå Wrong AWS account!"
            exit 1
          fi
          echo "‚úÖ Confirmed production account"

      - name: Install Dependencies
        working-directory: server
        run: npm ci

      - name: Create RDS Snapshot (Production)
        run: |
          SNAPSHOT_ID="prod-pre-migration-$(date +%Y%m%d-%H%M%S)"
          echo "Creating production snapshot: $SNAPSHOT_ID"
          echo "SNAPSHOT_ID=$SNAPSHOT_ID" >> $GITHUB_ENV

          aws rds create-db-snapshot \
            --db-instance-identifier production-rento-postgres \
            --db-snapshot-identifier "$SNAPSHOT_ID" \
            --tags Key=Environment,Value=Production Key=CreatedBy,Value=GitHubActions Key=Critical,Value=true

          echo "‚è≥ Waiting for snapshot to complete..."
          aws rds wait db-snapshot-completed \
            --db-snapshot-identifier "$SNAPSHOT_ID" \
            --max-attempts 30 \
            --delay 10

          echo "‚úÖ Snapshot completed: $SNAPSHOT_ID"

      - name: Check Migration Status
        working-directory: server
        env:
          CI: true
          MIGRATION_ENV: prod
        run: |
          echo "Current production migration status:"
          npm run db:migrate:prod:status

      - name: Run Migrations (Production)
        working-directory: server
        env:
          CI: true
          AUTO_CONFIRM: true
          MIGRATION_ENV: prod
        run: npm run db:migrate:prod

      - name: Verify Migration Success
        working-directory: server
        env:
          CI: true
          MIGRATION_ENV: prod
        run: |
          echo "Verifying production database health..."
          npm run db:migrate:prod:status

      - name: Create GitHub Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Production Migration Failed',
              body: `## Production Database Migration Failed

              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
              **Commit:** ${context.sha}
              **Triggered by:** @${context.actor}
              **Snapshot for rollback:** ${{ env.SNAPSHOT_ID }}

              ### Immediate Actions Required:
              1. Investigate the failure in the workflow logs
              2. Assess production database health
              3. Consider rollback if database is inconsistent
              4. Fix migration issues and re-deploy

              ### Rollback Command:
              \`\`\`bash
              aws rds restore-db-instance-from-db-snapshot \\
                --db-instance-identifier production-rento-postgres-restored \\
                --db-snapshot-identifier ${{ env.SNAPSHOT_ID }}
              \`\`\`

              cc: @your-team-members
              `,
              labels: ['critical', 'database', 'production']
            })
